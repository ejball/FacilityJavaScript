// DO NOT EDIT: generated by fsdgenjs
/* eslint-disable */

import { HttpClientUtility, IServiceResult, IHttpClientOptions } from 'facility-core';
import { IConformanceApi, IGetApiInfoRequest, IGetApiInfoResponse, IGetWidgetsRequest, IGetWidgetsResponse, ICreateWidgetRequest, ICreateWidgetResponse, IGetWidgetRequest, IGetWidgetResponse, IDeleteWidgetRequest, IDeleteWidgetResponse, IGetWidgetBatchRequest, IGetWidgetBatchResponse, IMirrorFieldsRequest, IMirrorFieldsResponse, ICheckQueryRequest, ICheckQueryResponse, ICheckPathRequest, ICheckPathResponse, IMirrorHeadersRequest, IMirrorHeadersResponse, IMixedRequest, IMixedResponse, IRequiredRequest, IRequiredResponse, IWidget, IAny, IAnyArray, IAnyMap, IAnyResult, IHasWidget, Answer } from './conformanceApiTypes';
export * from './conformanceApiTypes';

/** Provides access to ConformanceApi over HTTP via fetch. */
export function createHttpClient({ fetch, baseUri }: IHttpClientOptions): IConformanceApi {
  return new ConformanceApiHttpClient(fetch, baseUri);
}

const { fetchResponse, createResponseError, createRequiredRequestFieldError } = HttpClientUtility;
type IFetch = HttpClientUtility.IFetch;
type IFetchRequest = HttpClientUtility.IFetchRequest;

class ConformanceApiHttpClient implements IConformanceApi {
  constructor(fetch: IFetch, baseUri?: string) {
    if (typeof fetch !== 'function') {
      throw new TypeError('fetch must be a function.');
    }
    if (typeof baseUri === 'undefined') {
      baseUri = '';
    }
    if (/[^\/]$/.test(baseUri)) {
      baseUri += '/';
    }
    this._fetch = fetch;
    this._baseUri = baseUri;
  }

  /** Gets API information. */
  public getApiInfo(request: IGetApiInfoRequest): Promise<IServiceResult<IGetApiInfoResponse>> {
    const uri = '';
    const fetchRequest: IFetchRequest = {
      method: 'GET',
    };
    return fetchResponse(this._fetch, this._baseUri + uri, fetchRequest)
      .then(result => {
        const status = result.response.status;
        let value: IGetApiInfoResponse | null = null;
        if (result.json) {
          if (status === 200) {
            value = result.json;
          }
        }
        if (!value) {
          return createResponseError(status, result.json) as IServiceResult<IGetApiInfoResponse>;
        }
        return { value: value };
      });
  }

  /** Gets widgets. */
  public getWidgets(request: IGetWidgetsRequest): Promise<IServiceResult<IGetWidgetsResponse>> {
    let uri = 'widgets';
    const query: string[] = [];
    request.query == null || query.push('q=' + encodeURIComponent(request.query));
    if (query.length) {
      uri = uri + '?' + query.join('&');
    }
    const fetchRequest: IFetchRequest = {
      method: 'GET',
    };
    return fetchResponse(this._fetch, this._baseUri + uri, fetchRequest)
      .then(result => {
        const status = result.response.status;
        let value: IGetWidgetsResponse | null = null;
        if (result.json) {
          if (status === 200) {
            value = result.json;
          }
        }
        if (!value) {
          return createResponseError(status, result.json) as IServiceResult<IGetWidgetsResponse>;
        }
        return { value: value };
      });
  }

  /** Creates a new widget. */
  public createWidget(request: ICreateWidgetRequest): Promise<IServiceResult<ICreateWidgetResponse>> {
    const uri = 'widgets';
    const fetchRequest: IFetchRequest = {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(request.widget)
    };
    return fetchResponse(this._fetch, this._baseUri + uri, fetchRequest)
      .then(result => {
        const status = result.response.status;
        let value: ICreateWidgetResponse | null = null;
        if (result.json) {
          if (status === 201) {
            value = { widget: result.json };
          }
        }
        if (!value) {
          return createResponseError(status, result.json) as IServiceResult<ICreateWidgetResponse>;
        }
        let headerValue: string | null | undefined;
        headerValue = result.response.headers.get('Location');
        if (headerValue != null) {
          value.url = headerValue;
        }
        headerValue = result.response.headers.get('eTag');
        if (headerValue != null) {
          value.eTag = headerValue;
        }
        return { value: value };
      });
  }

  /** Gets the specified widget. */
  public getWidget(request: IGetWidgetRequest): Promise<IServiceResult<IGetWidgetResponse>> {
    const uriPartId = request.id != null && request.id.toString();
    if (!uriPartId) {
      return Promise.resolve(createRequiredRequestFieldError('id'));
    }
    const uri = `widgets/${uriPartId}`;
    const fetchRequest: IFetchRequest = {
      method: 'GET',
      headers: {},
    };
    if (request.ifNotETag != null) {
      fetchRequest.headers['If-None-Match'] = request.ifNotETag;
    }
    return fetchResponse(this._fetch, this._baseUri + uri, fetchRequest)
      .then(result => {
        const status = result.response.status;
        let value: IGetWidgetResponse | null = null;
        if (result.json) {
          if (status === 200) {
            value = { widget: result.json };
          }
          else if (status === 304) {
            value = { notModified: true };
          }
        }
        if (!value) {
          return createResponseError(status, result.json) as IServiceResult<IGetWidgetResponse>;
        }
        let headerValue: string | null | undefined;
        headerValue = result.response.headers.get('eTag');
        if (headerValue != null) {
          value.eTag = headerValue;
        }
        return { value: value };
      });
  }

  /** Deletes the specified widget. */
  public deleteWidget(request: IDeleteWidgetRequest): Promise<IServiceResult<IDeleteWidgetResponse>> {
    const uriPartId = request.id != null && request.id.toString();
    if (!uriPartId) {
      return Promise.resolve(createRequiredRequestFieldError('id'));
    }
    const uri = `widgets/${uriPartId}`;
    const fetchRequest: IFetchRequest = {
      method: 'DELETE',
      headers: {},
    };
    if (request.ifETag != null) {
      fetchRequest.headers['If-Match'] = request.ifETag;
    }
    return fetchResponse(this._fetch, this._baseUri + uri, fetchRequest)
      .then(result => {
        const status = result.response.status;
        let value: IDeleteWidgetResponse | null = null;
        if (result.json) {
          if (status === 204) {
            value = {};
          }
          else if (status === 404) {
            value = { notFound: true };
          }
          else if (status === 409) {
            value = { conflict: true };
          }
        }
        if (!value) {
          return createResponseError(status, result.json) as IServiceResult<IDeleteWidgetResponse>;
        }
        return { value: value };
      });
  }

  /** Gets the specified widgets. */
  public getWidgetBatch(request: IGetWidgetBatchRequest): Promise<IServiceResult<IGetWidgetBatchResponse>> {
    const uri = 'widgets/get';
    const fetchRequest: IFetchRequest = {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(request.ids)
    };
    return fetchResponse(this._fetch, this._baseUri + uri, fetchRequest)
      .then(result => {
        const status = result.response.status;
        let value: IGetWidgetBatchResponse | null = null;
        if (result.json) {
          if (status === 200) {
            value = { results: result.json };
          }
        }
        if (!value) {
          return createResponseError(status, result.json) as IServiceResult<IGetWidgetBatchResponse>;
        }
        return { value: value };
      });
  }

  public mirrorFields(request: IMirrorFieldsRequest): Promise<IServiceResult<IMirrorFieldsResponse>> {
    const uri = 'mirrorFields';
    const fetchRequest: IFetchRequest = {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(request)
    };
    return fetchResponse(this._fetch, this._baseUri + uri, fetchRequest)
      .then(result => {
        const status = result.response.status;
        let value: IMirrorFieldsResponse | null = null;
        if (result.json) {
          if (status === 200) {
            value = result.json;
          }
        }
        if (!value) {
          return createResponseError(status, result.json) as IServiceResult<IMirrorFieldsResponse>;
        }
        return { value: value };
      });
  }

  public checkQuery(request: ICheckQueryRequest): Promise<IServiceResult<ICheckQueryResponse>> {
    let uri = 'checkQuery';
    const query: string[] = [];
    request.string == null || query.push('string=' + encodeURIComponent(request.string));
    request.boolean == null || query.push('boolean=' + request.boolean.toString());
    request.double == null || query.push('double=' + encodeURIComponent(request.double.toString()));
    request.int32 == null || query.push('int32=' + request.int32.toString());
    request.int64 == null || query.push('int64=' + request.int64.toString());
    request.decimal == null || query.push('decimal=' + request.decimal.toString());
    request.enum == null || query.push('enum=' + request.enum);
    if (query.length) {
      uri = uri + '?' + query.join('&');
    }
    const fetchRequest: IFetchRequest = {
      method: 'GET',
    };
    return fetchResponse(this._fetch, this._baseUri + uri, fetchRequest)
      .then(result => {
        const status = result.response.status;
        let value: ICheckQueryResponse | null = null;
        if (result.json) {
          if (status === 200) {
            value = {};
          }
        }
        if (!value) {
          return createResponseError(status, result.json) as IServiceResult<ICheckQueryResponse>;
        }
        return { value: value };
      });
  }

  public checkPath(request: ICheckPathRequest): Promise<IServiceResult<ICheckPathResponse>> {
    const uriPartString = request.string != null && encodeURIComponent(request.string);
    if (!uriPartString) {
      return Promise.resolve(createRequiredRequestFieldError('string'));
    }
    const uriPartBoolean = request.boolean != null && request.boolean.toString();
    if (!uriPartBoolean) {
      return Promise.resolve(createRequiredRequestFieldError('boolean'));
    }
    const uriPartDouble = request.double != null && encodeURIComponent(request.double.toString());
    if (!uriPartDouble) {
      return Promise.resolve(createRequiredRequestFieldError('double'));
    }
    const uriPartInt32 = request.int32 != null && request.int32.toString();
    if (!uriPartInt32) {
      return Promise.resolve(createRequiredRequestFieldError('int32'));
    }
    const uriPartInt64 = request.int64 != null && request.int64.toString();
    if (!uriPartInt64) {
      return Promise.resolve(createRequiredRequestFieldError('int64'));
    }
    const uriPartDecimal = request.decimal != null && request.decimal.toString();
    if (!uriPartDecimal) {
      return Promise.resolve(createRequiredRequestFieldError('decimal'));
    }
    const uriPartEnum = request.enum != null && request.enum;
    if (!uriPartEnum) {
      return Promise.resolve(createRequiredRequestFieldError('enum'));
    }
    const uri = `mirror/${uriPartString}/${uriPartBoolean}/${uriPartDouble}/${uriPartInt32}/${uriPartInt64}/${uriPartDecimal}/${uriPartEnum}`;
    const fetchRequest: IFetchRequest = {
      method: 'GET',
    };
    return fetchResponse(this._fetch, this._baseUri + uri, fetchRequest)
      .then(result => {
        const status = result.response.status;
        let value: ICheckPathResponse | null = null;
        if (result.json) {
          if (status === 200) {
            value = {};
          }
        }
        if (!value) {
          return createResponseError(status, result.json) as IServiceResult<ICheckPathResponse>;
        }
        return { value: value };
      });
  }

  public mirrorHeaders(request: IMirrorHeadersRequest): Promise<IServiceResult<IMirrorHeadersResponse>> {
    const uri = 'mirrorHeaders';
    const fetchRequest: IFetchRequest = {
      method: 'GET',
      headers: {},
    };
    if (request.string != null) {
      fetchRequest.headers['string'] = request.string;
    }
    if (request.boolean != null) {
      fetchRequest.headers['boolean'] = request.boolean;
    }
    if (request.double != null) {
      fetchRequest.headers['double'] = request.double;
    }
    if (request.int32 != null) {
      fetchRequest.headers['int32'] = request.int32;
    }
    if (request.int64 != null) {
      fetchRequest.headers['int64'] = request.int64;
    }
    if (request.decimal != null) {
      fetchRequest.headers['decimal'] = request.decimal;
    }
    if (request.enum != null) {
      fetchRequest.headers['enum'] = request.enum;
    }
    return fetchResponse(this._fetch, this._baseUri + uri, fetchRequest)
      .then(result => {
        const status = result.response.status;
        let value: IMirrorHeadersResponse | null = null;
        if (result.json) {
          if (status === 200) {
            value = {};
          }
        }
        if (!value) {
          return createResponseError(status, result.json) as IServiceResult<IMirrorHeadersResponse>;
        }
        let headerValue: string | null | undefined;
        headerValue = result.response.headers.get('string');
        if (headerValue != null) {
          value.string = headerValue;
        }
        headerValue = result.response.headers.get('boolean');
        if (headerValue != null) {
          value.boolean = headerValue;
        }
        headerValue = result.response.headers.get('double');
        if (headerValue != null) {
          value.double = headerValue;
        }
        headerValue = result.response.headers.get('int32');
        if (headerValue != null) {
          value.int32 = headerValue;
        }
        headerValue = result.response.headers.get('int64');
        if (headerValue != null) {
          value.int64 = headerValue;
        }
        headerValue = result.response.headers.get('decimal');
        if (headerValue != null) {
          value.decimal = headerValue;
        }
        headerValue = result.response.headers.get('enum');
        if (headerValue != null) {
          value.enum = headerValue;
        }
        return { value: value };
      });
  }

  public mixed(request: IMixedRequest): Promise<IServiceResult<IMixedResponse>> {
    const uriPartPath = request.path != null && encodeURIComponent(request.path);
    if (!uriPartPath) {
      return Promise.resolve(createRequiredRequestFieldError('path'));
    }
    let uri = `mixed/${uriPartPath}`;
    const query: string[] = [];
    request.query == null || query.push('query=' + encodeURIComponent(request.query));
    if (query.length) {
      uri = uri + '?' + query.join('&');
    }
    const fetchRequest: IFetchRequest = {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        normal: request.normal
      })
    };
    if (request.header != null) {
      fetchRequest.headers['header'] = request.header;
    }
    return fetchResponse(this._fetch, this._baseUri + uri, fetchRequest)
      .then(result => {
        const status = result.response.status;
        let value: IMixedResponse | null = null;
        if (result.json) {
          if (status === 200) {
            value = result.json;
          }
          else if (status === 202) {
            value = { body: result.json };
          }
          else if (status === 204) {
            value = { empty: true };
          }
        }
        if (!value) {
          return createResponseError(status, result.json) as IServiceResult<IMixedResponse>;
        }
        let headerValue: string | null | undefined;
        headerValue = result.response.headers.get('header');
        if (headerValue != null) {
          value.header = headerValue;
        }
        return { value: value };
      });
  }

  public required(request: IRequiredRequest): Promise<IServiceResult<IRequiredResponse>> {
    let uri = 'required';
    const query: string[] = [];
    request.query == null || query.push('query=' + encodeURIComponent(request.query));
    if (query.length) {
      uri = uri + '?' + query.join('&');
    }
    const fetchRequest: IFetchRequest = {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        normal: request.normal,
        widget: request.widget,
        widgets: request.widgets,
        widgetMatrix: request.widgetMatrix,
        widgetResult: request.widgetResult,
        widgetResults: request.widgetResults,
        widgetMap: request.widgetMap,
        hasWidget: request.hasWidget
      })
    };
    return fetchResponse(this._fetch, this._baseUri + uri, fetchRequest)
      .then(result => {
        const status = result.response.status;
        let value: IRequiredResponse | null = null;
        if (result.json) {
          if (status === 200) {
            value = result.json;
          }
        }
        if (!value) {
          return createResponseError(status, result.json) as IServiceResult<IRequiredResponse>;
        }
        return { value: value };
      });
  }

  private _fetch: IFetch;
  private _baseUri: string;
}
