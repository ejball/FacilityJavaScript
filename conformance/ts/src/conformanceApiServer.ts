// DO NOT EDIT: generated by fsdgenjs
/* eslint-disable */

import * as bodyParser from 'body-parser';
import * as express from 'express';
import { IServiceResult } from 'facility-core';
import { IConformanceApi, IGetApiInfoRequest, IGetApiInfoResponse, IGetWidgetsRequest, IGetWidgetsResponse, ICreateWidgetRequest, ICreateWidgetResponse, IGetWidgetRequest, IGetWidgetResponse, IDeleteWidgetRequest, IDeleteWidgetResponse, IGetWidgetBatchRequest, IGetWidgetBatchResponse, IMirrorFieldsRequest, IMirrorFieldsResponse, ICheckQueryRequest, ICheckQueryResponse, ICheckPathRequest, ICheckPathResponse, IMirrorHeadersRequest, IMirrorHeadersResponse, IMixedRequest, IMixedResponse, IRequiredRequest, IRequiredResponse, IWidget, IAny, IAnyArray, IAnyMap, IAnyResult, IHasWidget, Answer } from './conformanceApiTypes';
export * from './conformanceApiTypes';

const standardErrorCodes: { [code: string]: number } = {
  'NotModified': 304,
  'InvalidRequest': 400,
  'NotAuthenticated': 401,
  'NotAuthorized': 403,
  'NotFound': 404,
  'Conflict': 409,
  'RequestTooLarge': 413,
  'TooManyRequests': 429,
  'InternalError': 500,
  'ServiceUnavailable': 503,
};

function parseBoolean(value: string | undefined) {
  if (typeof value === 'string') {
    const lowerValue = value.toLowerCase();
    if (lowerValue === 'true') {
      return true;
    }
    if (lowerValue === 'false') {
      return false;
    }
  }
  return undefined;
}

export function createApp(service: IConformanceApi): express.Application {
  const app = express();
  app.use(bodyParser.json());
  app.use(bodyParser.urlencoded({ extended: true }));

  /** Gets API information. */
  app.get('/', function (req, res, next) {
    const request: IGetApiInfoRequest = {};

    return service.getApiInfo(request)
      .then(result => {
        if (result.error) {
          const status = result.error.code && standardErrorCodes[result.error.code] || 500;
          res.status(status).send(result.error);
          return;
        }
        if (result.value) {
          res.status(200).send({
            service: result.value.service,
            version: result.value.version,
          });
          return;
        }
        throw new Error('Result must have an error or value.');
      })
      .catch(next);
  });

  /** Gets widgets. */
  app.get('/widgets', function (req, res, next) {
    const request: IGetWidgetsRequest = {};
    if (req.query['q'] != null) {
      request.query = req.query['q'];
    }

    return service.getWidgets(request)
      .then(result => {
        if (result.error) {
          const status = result.error.code && standardErrorCodes[result.error.code] || 500;
          res.status(status).send(result.error);
          return;
        }
        if (result.value) {
          res.status(200).send({
            widgets: result.value.widgets,
          });
          return;
        }
        throw new Error('Result must have an error or value.');
      })
      .catch(next);
  });

  /** Creates a new widget. */
  app.post('/widgets', function (req, res, next) {
    const request: ICreateWidgetRequest = {};
    request.widget = req.body;

    return service.createWidget(request)
      .then(result => {
        if (result.error) {
          const status = result.error.code && standardErrorCodes[result.error.code] || 500;
          res.status(status).send(result.error);
          return;
        }
        if (result.value) {
          if (result.value.url != null) {
            res.setHeader('Location', result.value.url);
          }
          if (result.value.eTag != null) {
            res.setHeader('eTag', result.value.eTag);
          }
          if (result.value.widget) {
            res.status(201).send(result.value.widget);
            return;
          }
        }
        throw new Error('Result must have an error or value.');
      })
      .catch(next);
  });

  /** Gets the specified widget. */
  app.get('/widgets/:id', function (req, res, next) {
    const request: IGetWidgetRequest = {};
    request.id = parseInt(req.params.id, 10);
    request.ifNotETag = req.header('If-None-Match');

    return service.getWidget(request)
      .then(result => {
        if (result.error) {
          const status = result.error.code && standardErrorCodes[result.error.code] || 500;
          res.status(status).send(result.error);
          return;
        }
        if (result.value) {
          if (result.value.eTag != null) {
            res.setHeader('eTag', result.value.eTag);
          }
          if (result.value.widget) {
            res.status(200).send(result.value.widget);
            return;
          }
          if (result.value.notModified) {
            res.sendStatus(304);
            return;
          }
        }
        throw new Error('Result must have an error or value.');
      })
      .catch(next);
  });

  /** Deletes the specified widget. */
  app.delete('/widgets/:id', function (req, res, next) {
    const request: IDeleteWidgetRequest = {};
    request.id = parseInt(req.params.id, 10);
    request.ifETag = req.header('If-Match');

    return service.deleteWidget(request)
      .then(result => {
        if (result.error) {
          const status = result.error.code && standardErrorCodes[result.error.code] || 500;
          res.status(status).send(result.error);
          return;
        }
        if (result.value) {
          res.sendStatus(204);
          return;
          if (result.value.notFound) {
            res.sendStatus(404);
            return;
          }
          if (result.value.conflict) {
            res.sendStatus(409);
            return;
          }
        }
        throw new Error('Result must have an error or value.');
      })
      .catch(next);
  });

  /** Gets the specified widgets. */
  app.post('/widgets/get', function (req, res, next) {
    const request: IGetWidgetBatchRequest = {};
    request.ids = req.body;

    return service.getWidgetBatch(request)
      .then(result => {
        if (result.error) {
          const status = result.error.code && standardErrorCodes[result.error.code] || 500;
          res.status(status).send(result.error);
          return;
        }
        if (result.value) {
          if (result.value.results) {
            res.status(200).send(result.value.results);
            return;
          }
        }
        throw new Error('Result must have an error or value.');
      })
      .catch(next);
  });

  app.post('/mirrorFields', function (req, res, next) {
    const request: IMirrorFieldsRequest = {};
    request.field = req.body.field;
    request.matrix = req.body.matrix;

    return service.mirrorFields(request)
      .then(result => {
        if (result.error) {
          const status = result.error.code && standardErrorCodes[result.error.code] || 500;
          res.status(status).send(result.error);
          return;
        }
        if (result.value) {
          res.status(200).send({
            field: result.value.field,
            matrix: result.value.matrix,
          });
          return;
        }
        throw new Error('Result must have an error or value.');
      })
      .catch(next);
  });

  app.get('/checkQuery', function (req, res, next) {
    const request: ICheckQueryRequest = {};
    if (req.query['string'] != null) {
      request.string = req.query['string'];
    }
    if (req.query['boolean'] != null) {
      request.boolean = parseBoolean(req.query['boolean']);
    }
    if (req.query['double'] != null) {
      request.double = parseFloat(req.query['double']);
    }
    if (req.query['int32'] != null) {
      request.int32 = parseInt(req.query['int32'], 10);
    }
    if (req.query['int64'] != null) {
      request.int64 = parseInt(req.query['int64'], 10);
    }
    if (req.query['decimal'] != null) {
      request.decimal = parseFloat(req.query['decimal']);
    }
    if (req.query['enum'] != null) {
      request.enum = req.query['enum'];
    }

    return service.checkQuery(request)
      .then(result => {
        if (result.error) {
          const status = result.error.code && standardErrorCodes[result.error.code] || 500;
          res.status(status).send(result.error);
          return;
        }
        if (result.value) {
          res.sendStatus(200);
          return;
        }
        throw new Error('Result must have an error or value.');
      })
      .catch(next);
  });

  app.get('/mirror/:string/:boolean/:double/:int32/:int64/:decimal/:enum', function (req, res, next) {
    const request: ICheckPathRequest = {};
    request.string = req.params.string;
    request.boolean = parseBoolean(req.params.boolean);
    request.double = parseFloat(req.params.double);
    request.int32 = parseInt(req.params.int32, 10);
    request.int64 = parseInt(req.params.int64, 10);
    request.decimal = parseFloat(req.params.decimal);
    request.enum = req.params.enum;

    return service.checkPath(request)
      .then(result => {
        if (result.error) {
          const status = result.error.code && standardErrorCodes[result.error.code] || 500;
          res.status(status).send(result.error);
          return;
        }
        if (result.value) {
          res.sendStatus(200);
          return;
        }
        throw new Error('Result must have an error or value.');
      })
      .catch(next);
  });

  app.get('/mirrorHeaders', function (req, res, next) {
    const request: IMirrorHeadersRequest = {};
    request.string = req.header('string');
    request.boolean = req.header('boolean');
    request.double = req.header('double');
    request.int32 = req.header('int32');
    request.int64 = req.header('int64');
    request.decimal = req.header('decimal');
    request.enum = req.header('enum');

    return service.mirrorHeaders(request)
      .then(result => {
        if (result.error) {
          const status = result.error.code && standardErrorCodes[result.error.code] || 500;
          res.status(status).send(result.error);
          return;
        }
        if (result.value) {
          if (result.value.string != null) {
            res.setHeader('string', result.value.string);
          }
          if (result.value.boolean != null) {
            res.setHeader('boolean', result.value.boolean);
          }
          if (result.value.double != null) {
            res.setHeader('double', result.value.double);
          }
          if (result.value.int32 != null) {
            res.setHeader('int32', result.value.int32);
          }
          if (result.value.int64 != null) {
            res.setHeader('int64', result.value.int64);
          }
          if (result.value.decimal != null) {
            res.setHeader('decimal', result.value.decimal);
          }
          if (result.value.enum != null) {
            res.setHeader('enum', result.value.enum);
          }
          res.sendStatus(200);
          return;
        }
        throw new Error('Result must have an error or value.');
      })
      .catch(next);
  });

  app.post('/mixed/:path', function (req, res, next) {
    const request: IMixedRequest = {};
    request.path = req.params.path;
    if (req.query['query'] != null) {
      request.query = req.query['query'];
    }
    request.normal = req.body.normal;
    request.header = req.header('header');

    return service.mixed(request)
      .then(result => {
        if (result.error) {
          const status = result.error.code && standardErrorCodes[result.error.code] || 500;
          res.status(status).send(result.error);
          return;
        }
        if (result.value) {
          if (result.value.header != null) {
            res.setHeader('header', result.value.header);
          }
          if (result.value.body) {
            res.status(202).send(result.value.body);
            return;
          }
          if (result.value.empty) {
            res.sendStatus(204);
            return;
          }
          res.status(200).send({
            normal: result.value.normal,
          });
          return;
        }
        throw new Error('Result must have an error or value.');
      })
      .catch(next);
  });

  app.post('/required', function (req, res, next) {
    const request: IRequiredRequest = {};
    if (req.query['query'] != null) {
      request.query = req.query['query'];
    }
    request.normal = req.body.normal;
    request.widget = req.body.widget;
    request.widgets = req.body.widgets;
    request.widgetMatrix = req.body.widgetMatrix;
    request.widgetResult = req.body.widgetResult;
    request.widgetResults = req.body.widgetResults;
    request.widgetMap = req.body.widgetMap;
    request.hasWidget = req.body.hasWidget;

    return service.required(request)
      .then(result => {
        if (result.error) {
          const status = result.error.code && standardErrorCodes[result.error.code] || 500;
          res.status(status).send(result.error);
          return;
        }
        if (result.value) {
          res.status(200).send({
            normal: result.value.normal,
          });
          return;
        }
        throw new Error('Result must have an error or value.');
      })
      .catch(next);
  });

  return app;
}
